version: 0.2

env:
  variables:
    AWS_ACCOUNT_ID: "585768158376"
    AWS_REGION: "us-east-1"
    ECR_REPOSITORY_CLIENTE: "cliente"
    ECR_REPOSITORY_SERVIDOR: "servidor"
    IMAGE_TAG: "latest"
    TF_VAR_cliente_image: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/cliente:${IMAGE_TAG}"
    TF_VAR_servidor_image: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/servidor:${IMAGE_TAG}"
    WORKSPACE: "prod"

phases:
  install:
    commands:
      - echo "Instalando Docker..."
      - yum update -y
      - yum install -y docker
      - echo "Iniciando Docker en segundo plano..."
      - nohup dockerd &>/var/log/dockerd.log &
      - timeout 15 sh -c "until docker info; do echo 'Esperando a Docker...' && sleep 1; done"
      - echo "Docker iniciado exitosamente."
      - curl -L "https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      - chmod +x /usr/local/bin/docker-compose
      - echo "Instalando Terraform v1.0.3..."
      - yum install -y unzip jq
      - curl -o terraform.zip https://releases.hashicorp.com/terraform/1.0.3/terraform_1.0.3_linux_amd64.zip
      - unzip terraform.zip
      - mv terraform /usr/bin/
      - terraform version

  pre_build:
    commands:
      - echo "Iniciando sesión en Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

  build:
    commands:
      - echo "Construyendo las imágenes Docker..."
      - docker-compose build
      - echo "Etiquetando imágenes para Amazon ECR..."
      - docker tag cliente:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_CLIENTE:$IMAGE_TAG
      - docker tag servidor:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_SERVIDOR:$IMAGE_TAG
      - echo "Subiendo imágenes a Amazon ECR..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_CLIENTE:$IMAGE_TAG
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_SERVIDOR:$IMAGE_TAG

  post_build:
    commands:
      - echo "Listando archivos del proyecto..."
      - ls -al
      - echo "Configurando acceso a Kubernetes..."
      - aws eks update-kubeconfig --region us-east-1 --name test-simetric
      - kubectl config use-context arn:aws:eks:us-east-1:585768158376:cluster/test-simetric
      - echo "Verificando si el ConfigMap aws-auth está configurado..."
      - kubectl get configmap aws-auth -n kube-system || cat <<EOF | kubectl apply -f - --validate=false
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapRoles: |
    - rolearn: arn:aws:iam::585768158376:role/test-simetric-node-role
      username: system:node:{{EC2PrivateDNSName}}
      groups:
        - system:bootstrappers
        - system:nodes
  mapUsers: |
    - userarn: arn:aws:iam::585768158376:user/terraform
      username: terraform
      groups:
        - system:masters
EOF
      - echo "Validando si los nodos están disponibles..."
      - kubectl get nodes || echo "Los nodos aún no están disponibles. Verifica la configuración."
      - echo "Cambiando al directorio de Terraform (app)..."
      - cd app
      - echo "Inicializando Terraform en el directorio 'app'..."
      - terraform init
      - terraform workspace select $WORKSPACE
      - echo "Workspace donde se va a desplegar..."
      - terraform workspace show
      - echo "Planeando la infraestructura con Terraform..."
      - terraform plan -out=tfplan
      - echo "Aplicando cambios con Terraform..."
      - terraform apply -auto-approve tfplan

artifacts:
  files:
    - "**/*"
